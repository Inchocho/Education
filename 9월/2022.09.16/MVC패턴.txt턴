MVC패턴이란?

사용자가 입력을 담당하는 View를 통해 요청을 보내면 해당 요청을 Controller가 받고, 
Controller는 Model을 통해 데이터를 가져오고, 해당 데이터를 바탕으로 
출력을 담당하는 View를 제어해서 사용자에게 전달한다. 
MVC 패턴을 사용하면 Model과 View가 다른 컴포넌트들에 종속되지 않아 변경에 유리하다는 장점을 가질 수 있다.

모든 로직은 뒷단에서 시작됨 web.xml -> 뒷단 -> 화면단

#컴포넌트란?#
컴포넌트(Component)란 프로그래밍에 있어 재사용이 가능한 각각의 독립된 모듈을 뜻한다.

##MVC 아키텍처##
MODEL/VIEW/CONTROLLER

[1]모델(MODEL) 
데이터 저장소(ex: 데이터베이스)와 연동하여 사용자가 입력한 데이터나 
사용자에게 출력할 데이터를 다루는 일을 한다
특히 여러 개의 데이터 변경 작업(추가, 변경, 삭제)를 하나의 작업으로 묶는
트랜잭션을 다루는 일도 한다   
Model은 다른 컴포넌트들에 대해 알지 못한다. 자기 자신이 무엇을 수행하는지만 알고 있다.

#트랜잭션(Transaction 이하 트랜잭션)이란#
데이터베이스의 상태를 변화시키기 해서 수행하는 작업의 단위

**DTO(Data Transfer Object, 데이터 전송 객체)
데이터베이스 테이블에 해당하는 객체로 테이블의 컬럼들을 일대일로
저장할 수 있는 멤버필드가 있고 get/set 메소드(getter/setter)를 갖는다 
이들을 통하여 DB와 웹 서버와의 데이터를 전송한다
오직 데이터만 전달하는 역할을 하며 !!로직은 구현하지 않는다!!


[2]뷰(VIEW) 
모델이 처리한 데이터나 그 작업 결과를 가지고 사용자에게 출력할 화면을
만드는 일을 한다. 이렇게 생성된 화면은 웹 브라우저가 출력한다
즉 뷰 컴포넌트는 HTML과 css, Javascript를 사용하여 웹 브라우저가 
출력할 UI를 만든다
View 역시도 다른 컴포넌트들에 대해 알지 못한다. 자기 자신이 무엇을 수행하는지만 알고 있다.
MemberListView.jsp 참조

#JSP란 쉽게 말하자면 HTML에 Java 코드를 섞어 놓은 것을 말한다.
이렇게 작성된 JSP 페이지는 컨테이너가 알아서 JSP를 서블릿 소스 코드로 변환한 다음,
컴파일하여 완전한 서블릿 클래스로 만든다.#

<% %> 스크립틀릿 (JSP 전용 태그) : JSP 언어 
<% %> 이안의 코드는 자바코드로 인식된다
<% 
	자바코드 
%>

표현식 
<%= %> : 익스프레션(Expression) 
<%=결과를 표현하는 자바 표현식%> 

여기 작성한 코드는 html페이지에 표시된다

[3]컨트롤러(CONTROLLER)
Model과 View 사이에 있는 컴포넌트이다. Model이 데이터를 어떻게 처리할지 알려주는 역할을 한다. 
클라이언트의 요청을 받으면 해당 요청에 대한 실제 업무를 수행하는 Model을 호출한다. 
클라이언트가 보낸 데이터가 있다면, 모델을 호출할 때 전달하기 쉽게 적절히 가공한다. 
Model이 업무 수행을 완료하면 그 결과를 가지고 화면을 생성하도록 View에 전달한다. 
즉, 클라이언트의 요청에 대해 Model과 View를 결정하여 전달하는 일종의 조정자로서의 일을 한다.
Controller는 다른 컴포넌트들에 대해 알고 있다. 자기 자신 외에 Model과 View가 무엇을 수행하는지 알고 있다.

MVC의 이점
1. 별도의 컴포넌트로 분리하였기 때문에 필요한 부분을 적절히 교체하여 손쉽게
사용자 화면을 바꿀 수 있다

2. 코드를 재사용 할 수 있다

3. 빠른 개발, 저렴한 비용 -> 개발 속도 향상

4. 코드의 난이도 하향

결국 전체적인 개발 및 유지보수 비용을 줄일 수 있다

++DTO를 사용하는 이유 
변수명에 직접 접근하지 않게 숨기고
get/set 메소드를 통해서 접근한다 