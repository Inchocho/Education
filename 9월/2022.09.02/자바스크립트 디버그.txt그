자바스크립트 디버깅테스트 하는법(크롬 개발자모드 디버깅)
해당 jsp파일명을 복사해서
js파일로 만든다

해당 jsp의 스크립트 하단 <script> </script> 내부 내용을 전부 복사해서
js파일에 복사붙여넣기하고
기존 jsp의 스크립트를 모두 삭제한다
그다음 이렇게
<script type="text/javascript" src="./js/debugingTest.js">
외부참조형식으로 스크립트를 가져온다 
그다음 개발자도구 새로고침한뒤 sources로 가서 js폴더에있는 js파일을 열어서
라인을 찍고 (브레이크포인트) 실행하면
디버그모드가 시작된다

실행추적하기
‘Resume’: 스크립트 실행을 다시 시작함 (단축키 F8)
실행을 재개합니다. 추가 중단점이 없는 경우, 실행이 죽 이어지고 디버거는 동작하지 않습니다.
버튼을 클릭해봅시다.

‘Step’: 다음 명령어를 실행함 (단축키 F9)
다음 문을 실행합니다. 클릭하면 alert 창이 뜨는 것을 확인할 수 있습니다.
Step 버튼을 계속 누르면 스크립트 전체를 문 단위로 하나하나 실행할 수 있습니다.

‘Step over’: 다음 명령어를 실행하되, 함수 안으로 들어가진 않음 (단축키 F10)
'Step’과 유사하지만, 다음 문이 함수 호출일 때 'Step’과는 다르게 동작합니다
(alert 같은 내장함수에는 해당하지 않고, 직접 작성한 함수일 때만 동작이 다릅니다).
'Step’은 함수 내부로 들어가 함수 본문 첫 번째 줄에서 실행을 멈춥니다. 
반면 'Step over’는 보이지 않는 곳에서 중첩 함수를 실행하긴 하지만 함수 내로 진입하지 않습니다.
실행은 함수 실행이 끝난 후에 즉시 멈춥니다.

‘Step into’ (단축키 F11)
'Step over’은 함수 호출 시 내부에서 어떤 일이 일어나는지 궁금하지 않을 때 유용합니다.
'Step’과 유사한데, 비동기 함수 호출에서 'Step’과는 다르게 동작합니다. 
이제 막 자바스크립트를 배우기 시작한 분이라면 비동기 호출에 대해 아직 배우지 않았기 때문에 
'Step’과 'Step into’의 차이를 몰라도 괜찮습니다.
'Step’은 setTimeout(함수 호출 스케줄링에 쓰이는 내장 메서드)같은 비동기 동작은 무시합니다. 
반면 'Step into’는 비동기 동작을 담당하는 코드로 진입하고, 필요하다면 비동기 동작이 완료될 때까지 대기합니다. 

‘Step out’: 실행 중인 함수의 실행이 끝날 때 까지 실행을 계속함 (단축키 Shift+F11)
현재 실행 중인 함수의 실행을 계속 이어가다가 함수 본문 마지막 줄에서 실행을 멈춥니다. 
실수로 을 눌러 내부 동작을 알고 싶지 않은 중첩 함수로 진입했거나 
가능한 한 빨리 함수 실행을 끝내고 싶은 경우 유용합니다,
