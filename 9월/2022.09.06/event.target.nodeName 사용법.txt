이벤트가 시작된곳의 노드네임(이벤트가 시작된 최초의 장소를 확인)
alert(event.target.nodeName);

this는 이벤트가 처리되고 있는 DOM요소(현재대상)의 참조를 나타냅니다.
event.target은 이벤트를 시작한 요소를 나타냅니다. 

this는 현재 이벤트가 처리되고 있는 DOM요소의 참조
event.target은 이벤트를 시작한 최초시점의 요소

event.target.nodeName : 이벤트 시작한 최초시점의 요소명
this.nodeName : 현재 처리되고 있는 DOM 요소명

참조 페이지 ###this,event.jsp###

	window.onload = function() {
		var rootDivObj = document.getElementById('rootDiv');
		// 		rootDivObj.addEventListener('click', rootDivFunc, false);
		rootDivObj.addEventListener('click', rootDivFunc, false);

		var parentDivObj = document.getElementById('parentDiv');
		// 		parentDivObj.addEventListener('click', parentDivFunc, false);
		parentDivObj.addEventListener('click', parentDivFunc, false);

		var childBtnObj = document.getElementById('childBtn');
		// 		childBtnObj.addEventListener('click', childBtnFunc, false);
		childBtnObj.addEventListener('click', childBtnFunc, false);

	};

	function rootDivFunc() {
		alert('rootDiv');
		alert(this.nodeName);
		alert(event.target.nodeName);
	}

	function parentDivFunc() {
		alert('parentDiv');
		alert(this.nodeName);
		alert(event.target.nodeName);

	}

	function childBtnFunc() {
		alert("childBtn");
		alert(this.nodeName);
		alert(event.target.nodeName);
	}
	
이경우 root(div)>parent(div)>child(button)인데
child 버튼 클릭시 실행순서
[1]alert("childBtn");
[2]alert(this.nodeName); : button
[3]alert(event.target.nodeName); : button
[4]alert('parentDiv');
[5]alert(this.nodeName); : div
[6]alert(event.target.nodeName); : button
[7]alert('rootDiv');
[8]alert(this.nodeName); : div
[9]alert(event.target.nodeName); : button

보다시피 
this.nodeName에는 이벤트가 전파되면서 현재 처리되고있는 DOM요소의 노드명 ([2]button->[5]div->[8]div)이 나오는것을 확인하고
event.target.nodeName에는 이벤트가 발생한 최초시점인 button이 계속 나오는것을 확인 할 수 있다
