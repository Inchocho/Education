
레이어/티어

레이어는 프로그램의 역할에 따라 논리적으로, 티어는
시스템의 역할에 따라 물리적으로 나눈 것이다

데이터베이스에 접근해 정보를 가져오는 부분(data layer),
고객의 정보를 판단하고 실행하는 부분(business layer),
html로 결과를 만들고 응답하는 부분(prosentation layer)로 나눌수 있다

웹 프로그래밍은 기본저긍로 3티어다

화면 레이어(prosentation): jsp와 서블릿이 담당한다
결과를 받아 요청한 화면을 동적으로 만들고, 요청한 화면으로 옮긴다

데이터레이어(data): 영속성(persistence)로도 알려진 레이어로, 데이터베이스에
쿼리(CRUD)를 실행한다 JDBC작업을 실행해 쉽게 사용할 수 있도록
만든 프레임워크를 사용하기도 한다.
비즈니스 레이어(Business): 화면 레이어는 데이터를 이용한다
비즈니스에서 얻은 객체를 DTO or VO객체라고 하며, 데이터베이스의
테이블과 관련이 있다 데이터 레이어에서 얻은 결과로 화면 레이어에서
보낸다

논리 : pre > business > data > resource
물리 : client > server > els

DAO(Data Access Object) 데이터 접근 객체 

DTO(Data Transfer Object) 데이터 전송 객체

MVC(Model-View-Controller)

계층화 아키텍처
- 효율적인 개발과 유지보수를 위해 계층화 하여 개발
- 대부분의 중/대규모 어플리케이션에서 적용

*프레젠테이션 영역
- 사용자와 상호작용을 담당
- 사용자의 요청을 분석/응답
*비즈니스 영역
- 기능을 수행
- 트랜잭션 수행
*데이터영역
- 데이터의 저장과 조회를 담당
- 주로 데이터베이스와 연동하여 작업

*MVC패턴
- Layered Architecture를 사용한 대표적 패턴
- 어플리케이션을 Model, View, Controller로 구분
- UI를 가지는 대부분의 어플리케이션은 MVC 혹은 변형된 MVC 패턴을 사용

MVC 패턴의 개념
소프트웨어 공학에서 사용되는 아키텍처 패턴으로 주 목적은 
Business logic과 Presentation logic을 분리하기 위함이다

MVC패턴을 사용하면, 사용자 인터페이스로부터 비즈니스 로직을 분리하여
애플리케이션의 시각적 요소나 그 이면에서 실행되는 비즈니스 로직을 서로 
영향 없이 쉽게 고칠 수 있는 애플리케이션을 만들 수 있다

Model 	   : 애플리케이션의 정보(Business Layer, Data Layer)
View  	   : 사용자에게 제공할 화면(prosentation Layer)
Controller : Model과 View 사이의 상호 작용을 관리

*모델 컴포넌트
데이터 저장소와 연동하여 사용자가 입력한 데이터나 사용자에게 출력할 데이터를 
다루는 일을 한다. DAO 클래스, Service 클래스에 해당


