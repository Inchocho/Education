DB 설계 기초

1. 데이터 모델링의 이해

모델링의 정의
사람이 살아가면서 나타날 수 있는 다양한 현상은 사람, 사물, 개념 등에 의해 발생된다고 할 수 있으며
모델링은 이것을 표기법에 의해 규칙을 가지고 표기하는 것 자체를 의미한다
즉 모델을 만들어가는 일 자체를 모델링으로 정의 할 수 있다

현실세계 -----------> 모델(model)
		추상화
		단순화
		명확화
		
복잡한 현실세계를 일정한 표기법에 의해 표현하는 일		


*모델이란 사물 또는 사건에 관한 양상이나 관점(perspective)을 연관된 사람이나
그룹을 위하여 명확하게 하는 것이다
* 복잡한 '현실세계'를 단순화시켜 표현하는 것이다

2. 모델링의 특징
[1]추상화) 현실세계를 일정한 형식에 맞추어 표현을 한다는 의미
다양한 현상을 일정한 양식인 표기법에 의해 표현한다는 것
[2]단순화) 복잡한 현실세계를 약속된 규약에 의해 제약된 표기법이나 언어로 표현하여
쉽게 이해할 수 있도록 하는 개념을 의미
[3]명확화) 누구나 이해하기 쉽게 하기 위해 대상에 대한 애매모호함을 제거하고 
정확하게 현상을 기술하는 것을 의미

3. 데이터 모델의 기본 개념의 이해

데이터 모델링이란? 
* 정보시스템을 구축하기 위한 데이터 관점의 업무 분석 기법
* 현실세계의 데이터(what)에 대해 약속된 표기법에 의해 표현하는 과정
* 데이터베이스를 구축하기 위한 분석/설계의 과정

기업 업무에 대한 종합적인 이해를 바탕으로 데이터에 존재하는 업무 규칙에 대하여
참 또는 거짓을 판별할 수 있는 사실을 데이터에 접근하는 방법(how), 사람,
전산화와는 별개의 관점에서 이를 명확하게 표현하는 추상화 기법

데이터 모델이 제공하는 기능
* 시스템을 현재 또는 원하는 모습으로 가시화하도록 도와준다 
* 시스템을 구축하는 구조화된 틀을 제공한다 
* 시스템을 구축하는 과정에서 결정한 것을 문서화한다
* 다양한 영역에 집중하기 위해 다른 영역의 세부 사항은 숨기는 다양한 관점을 제공한다
* 특정 목표에 따라 구체화된 상세 수준의 표현 방법을 제공한다

4. 데이터 모델링의 중요성 및 유의점 
[1] 복잡한 요구사항의 간결한 표현
[2] 데이터 품질 향상

*데이터 모델링을 할때 유의점*
[1]중복(Duplication)

[2]비유연성(Inflexiblity)
데이터 모델을 어떻게 설계했느냐에 따라 사소한 업무변화에도 데이터 모델이 수시로 변경됨으로써
유지보수의 어려움을 가중시킬 수 있다
데이터의 정의를 데이터의 사용 프로세스와 분리함으로써 데이터 모델링은 데이터 혹은
프로세스의 작은 변화가 애플리케이션과 데이터베이스에 중대한 변화를 일으킬 수 있는 가능성을 줄인다

[3]비일관성(Inconsistency)
데이터의 중복이 없더라도 비일관성은 발생한다. 모순되는 일련의 데이터를 없애기 위해
데이터 모델링을 할 때 데이터와 데이터 간 상호 연관 관계에 대한 명확한 정의는 이러한
위험을 사전에 예방할 수 있도록 해준다.

5. **중====요** -개논물-
[*1*]개념적 데이터 모델링(Conceptual Data Modeling)
개념적 데이터베이스 설계는 조직, 사용자의 데이터 요구사항을 찾고 분석하는데서 시작한다
이 과정은 어떠한 자료가 중요하며 또 어떠한 자료가 유지되어야 하는지를 결정하는 것도 포함된다
이 단계에 있어서의 주요 활동은 업무와 업무들 간의 관계를 발견하고, 그것을 표현하기 위해서
엔티티 관계 다이어그램을 생성하는 것이다

요약: 추상화 수준이 높고 업무중식적이고 포괄적인 수준의 모델링 진행, 전사적 데이터 모델링

[*2*]논리적 데이터 모델링(Logical Data Modeling) 
논리 데이터 모델링은 데이터베이스의 설계 프로세스의 Input으로써 비즈니스 정보의 논리적인 구조와
규칙을 명확하게 표현하는 기법 또는 과정이라 할 수 있다.
논리 데이터 모델링의 결과로 얻어지는 논리 데이터 모델은 데이터 모델링이 최종적으로 완료된 상태라고
정의 할 수 있다. 누가, 어떻게, 그리고 전산화와는 별개로 비즈니스 데이터에 존재하는 사실들을
인식하여 기록하는 것이다.
데이터 모델링 과정에서 가장 핵심이 되는 부분이다.

요약: 시스템으로 구축하고자 하는 업무에 대해 Key, 속성, 관계 등을 정확하게 표현,
재사용성이 높음

[*3*]물리적 데이터 모델링(Physical Data Modeling)
데이터베이스 설계 과정의 마지막 단계인 물리 데이터 모델링은 논리 데이터 모델이
데이터 저장소로서 어떻게 컴퓨터 하드웨어에 표현될 것인가를 다룬다.
데이터가 물리적으로 컴퓨터에 어떻게 저장될 것인가에 대한 정의를 (물리적 스키마)라고 한다.
이 단계에서 결정되는 것은 테이블, 칼럼 등으로 표현되는 물리적인 저장구조와
사용될 저장 장치, 자료를 추출하기 위해 사용될 접근 방법 등이 있다

요약: 실제로 데이터베이스에 이식할 수 있도록 성능, 저장 등 물리적인 성격을
고려하여 설계

현실세계		개념적 데이터 모델링		개념세계
객체			------------->		개념적 구조 
↕↕								   ↕↕논리적 데이터 모델링
데이터베이스	<-------------		논리적 구조
			물리적 데이터 모델링
 
 
6. 프로젝트 생명주기(Life Cycle)

분석 -> 설계 -> 개발 -> 테스트 -> 이행 

7. 데이터베이스 3단계 구조

스키마(Schema)란 - 데이터베이스의 구조와 제약조건에 관해 전반적인 명세를 기술한 것
개체의 특성을 나타내는 속성(Attribute)
속성들의 집합으로 이루어진 개체(Entity), 
개체 사이에 존재하는 관계(Relation)에 대한 정의
이들이 유지해야 할 제약조건(Constraint)들을 기술한 것

외부 단계(External Schema = 외부 스키마) - 사용자 관점, 접근하는 특성에 따라 달라짐
- 개개의 사용자 단계로서 각 사용자가 보는 개인적 DB 스키마 (우리가 사용하는 DB계정 ezen, scott, 이런애들이 외부스키마)

개념적 단계(Conceptual Schema = 개념 스키마)
- 개념단계 하나의 개념적 스키마로 모든 사용자 관점을 통합한 조직 전체의 DB를 기술하는 것

내부적 단계(Internal Schema = 내부 스키마)
- DB가 물리적으로 저장된 형식
- 물리적 장치에서 데이터가 실제적으로 저장되는 방법을 표현하는 스키마

*논리적 독립성
- 논리적 구조가 변경되어도 응용 프로그램에 영향이 없음
- 사용자 특성에 맞는 변경 가능 

*물리적 독립성
- 저장장치의 구조 변경은 응용프로그램과 개념 스키마에 영향 없음 
- 물리적 구조 영향 없이 개념구조 변경 가능
- 개념구조 영향 없이 물리적인 구조 변경 가능 

*사상(Mapping)
상호 독립적인 개념을 연결시켜주는 다리

외부적과 개념적 사상 -> 논리적 사상 

개념적과 내부적 사상 -> 물리적 사상

//2022.10.26 수요일

8. 데이터 모델링의 세가지 요소
1) 업무가 관여하는 어떤 것(Things)
2) 어떤 것이 가지는 성격(Attributes)
3) 업무가 관여하는 어떤 것 간의 관계(Relationships)

데이터 모델링을 완성하는 핵심 개념이다 
사물이나 사건 등을 바라 볼 때 전체를 지칭하는 용어를 어떤 것(Things) -> 단어, 명사
어떤 것이 가지는 세부적인 사항을 성격(Attributes) -> 속성, 필드
각각의 어떤 것은 다른 어떤 것과 연관성을 가질 수 있는데 이것을 관계(Relationships) 라고 한다

Things -> 이주일, 심순애
Attributes -> 키가 180cm, 성격은 친절 // 키가 165cm 세심하며 활달한 성격
Relation -> 사랑하는 연인 사이

ERD(Entity Relationship Diagram) 표기법
ERD는 각 업무분석에서 도출된 엔티티와 엔티티 간의 관계를 이해하기 쉽게 도식화된 다이어그램으로 
해당 업무에서 데이터의 흐름과 프로세스와의 연관성을 이야기하는데 가장 중요한 
표기법이자 산출물이다

일정한 규칙을 지정하여 그림으로써 데이터 모델을 누구나 공통된 시각으로 파악할 수 있고 
의사소통을 원할하게 하는 장점이 있다

ERD 작업순서
1.엔티티를 그린다 -> 2.엔티티를 적절하게 배치한다 -> 3.엔티티간 관계를 설정한다 ->
4.관계명을 기술한다 -> 5.관계의 참여도를 기술한다 -> 6.관계의 필수여부를 기술한다

ERD는 엔티티와 엔티티 사이의 관계가 있는 정보를 나타내므로 두 개를 이용하여 작성하고,
이에 따라 기본키와 외래키를 ERD 규칙에 따라 기술하도록 한다.
엔티티는 사각형으로 표기하여 기술한다.

*배치 순서*

배치 순서는 중요한 순으로 왼쪽&위에서 시작하여 오른쪽&아래순으로 한다

*관계의 연결*
중복되는 관계가 발생하지 않도록 하고 Circle 관계도 발생하지 않도록 유의하여 작성

*관계명 표시*
관계이름은 현재형을 사용하고 지나치게 포괄적인 용어(이다, 가진다등)을 사용하지 않는다.

좋은 데이터 모델의 요소
*완전성
*중복배제
*업무규칙
*데이터 재사용
*의사소통
*통합성

(10.27 시작)==================================
논리(학문)				<---->			물리(실무)
엔티티(Entity)		=====			테이블
엔티티의 개념 (객체)
우리말로 실체, 객체라고 번역하기도 함
엔티티라고도 부름

엔티티? 테이블 알아들음 ㅇㅇ

*변별할수 있는 사물
*데이터베이스 내에서 변별 가능한 객체
*정보를 저장할 수 있는 어떤 것
*정보가 저장될 수 있는 사람, 장소, 물건, 사건, 개념 등

&&
엔티티는 사람, 장소, 물건, 사건, 개념등의 명사에 해당한다
엔티티는 업무상 관리가 필요한 관심사에 해당한다
엔티티는 저장이 되기 위한 어떤 것이다

=> 업무에 필요하고 유용한 정보를 저장하고 관리하기 위한 집합적인 것

ex: 과목, 강사, 사건

*엔티티의 특징
-엔티티가 다음의 성질을 만족하지 못하면 적절하지 않은 엔티티일 확률이 높다-

1) 반드시 해당 업무에서 필요하고 관리하고자 하는 정보이어야 한다 
예: 환자, 토익의 응시횟수 등 
2) 유일한 식별자(기본키 ex)주민등록번호)에 의해 식별이 가능해야 한다
3) 영속적으로 존재하는 인스턴스의 집합이어야 한다(1개가 아니라 2개 이상)
4) 엔티티는 업무 프로세스에 의해 이용되어야 한다
5) 엔티티는 반드시 속성(칼럼)이 있어야 한다 
6) 엔티티는 다른 엔티티와 최소 한 개 이상의 관계(조인)가 있어야 한다


엔티티 명명규칙 

1) 가능하면 현업업무에서 사용하는 용어를 사용한다 
2) 가능하면 약어를 사용하지 않는다
3) 단수명사를 사용한다 
4) 모든 엔티티에서 유일하게 이름이 부여되어야 한다 
5) 엔티티 생성의미대로 이름을 부여한다

2 - 속성(Attribute) <---> 컬럼(Column)
사전적인 의미로는 사물의 성질, 특징, 또는 본질적인 성질,
그것이 없다면 실체를 생각할 수 없는 것으로 정의할 수 있다

본질적 속성이란 어떤 사물 또는 개념에 없어서는 안 될 징표의 전부이다.
데이터 모델링 관점에서 속성을 정의한다면
업무에서 필요로 하는 인스턴스로 관리하고자 하는 의미상 더 이상 분리되지 않는
최소의 데이터 단위로 정의 할 수 있다 -> 원자성(Atomicity) : 하나의 트랜잭션은 모두 성공하거나 성공하지않으면 롤백된다

엔티티는 속성들에 의해 설명된다
강사란?		속성들(이름, 주소, 생년월일, 계약일자, 전문분야)

속성의 정의
*업무에서 필요로 한다
*의미상 더 이상 분리되지 않는다 
*엔티티를 설명하고 인스턴스의 구성요소가 된다

엔티티, 인스턴스, 속성, 속성값(레코드) -- 레코드들의 집합이 row)에 대한 관계
*한 개의 엔티티는 두 개 이상의 인스턴스의 집합이어야 한다 
*한 개의 엔티티는 두 개 이상의 속성을 갖는다
*한 개의 속성은 한 개의 속성값을 갖는다 

속성-----성별-----나이-----이름
속성값----남------20-----김똘똘 => row(속성값의 집합)

속성의 특징
*해당 업무에서 필요하고 관리하고자 하는 정보이어야 한다
*정규화 이론에 근간하여 정해진 주식별자에 함수적 종속성을 가져야 한다
*하나의 속성에는 한 개의 값만을 가진다. 하나의 속성에 여러 개의 값이 있는 다중 값일 경우
별도의 엔티티를 이용하여 분리한다

데이터베이스 정규화 1NF, 2NF, 3NF, BCNF
데이터베이스 정규화란 데이터베이스의 설계를 재구성하는 테크닉
정규화를 통해 불필요한 데이터(redundancy)를 없앨 수 있고, 
삽입/갱신/삭제 시 발생할 수 있는 각종 이상현상(Anamolies)들을 방지

3 - 도메인(Domain)
각 속성은 가질수 있는 값의 범위가 있는데 이를 그 속성의 도메인이라고 한다 
예를 들어 학생이라는 엔티티가 있을 때 
학점이라는 속성의 도메인은 0.0에서 4.5사이의 실수값 범위내에서 정해진다
주소라는 속성의 길이는 20자리 이내인 문자열로 정의할 수 있다
도메인이 지정되면 도메인 의외의 값은 갖지 못한다.
즉, 엔티티 내에서 속성에 대한 데이터 타입과 크기 그리고 제약사항을 지정하는 것이라 할 수 있다

*속성의 명명(naming)
Web개발 환경이든 어느 곳에서 개발하든 속성명이 곧 사용자 인터페이스에 
나타나기 때문에 업무와 직결되는 항목이다
그래서 속성 이름을 정확하게 부여하고 용어의 혼란을 없애기 위해 용어사전이라는 것을 만들기도 한다

속성명을 부여하는 원칙
1) 해당업무에서 사용하는 이름을 부여한다 
2) 서술식 속성명은 사용하지 않는다 
3) 약어사용은 가급적 제한한다
4) 전체 데이터모델에서 유일성을 확보하는 것이 좋다

4 - 관계(Relationship)
1. 관계의 개념 
관계를 사전적으로 정의하면 상호 연관성이 있는 상태로 말 할 수 있다
데이터 모델 관점에서 이야기하면 '엔티티의 인스턴스 사이의 논리적인 연관성으로서
존재의 형태로서나 행위로서 서로에게 연관성이 부여된 상태'라고 할 수 있다
관계는 엔티티와 엔티티 간 연관성을 표현하기 때문에 엔티티의 정의에 따라 영향을 받기도 
하고, 속성 정의 및 관계 정의에 따라서도 다양하게 변할 수 있다

인스턴스 사이의 논리적인 연관성으로서 존재 또는 행위로서 서로에게 연관성이 부여된 상태
강사 ----------------- 가르친다 --------------- 수강생