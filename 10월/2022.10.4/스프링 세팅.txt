이클립스: 마켓플레이스 
STS검색 -> Spring Tools 3 (3.9.14 릴리즈) 스탠드얼론 버전 인스톨

기존 자바1.8버전으로 구동 불가

2020/06 이클립스 - 스프링
환경설정 다시 세팅할것
경로: C드라이브 - eclipseSpring

ini 파일 변경
-Xms1024m
-Xmx4096m

이클립스 실행 ( C:/workspaceSpring) 경로

이클립스 디폴트 설정
(자바 라이브러리 jdk8로변경 - 인코딩 UTF-8로변경 - 서버 톰캣8(톰캣 경로 복사해서 워크스페이스 스프링에 넣어서 하자)

톰캣 서버 연동후 server.xml에서 변경(62번~63번라인) - URIEncoding을 추가해줘야한다 (포트번호 8080에서 안겹치게 변경)
<Connector connectionTimeout="20000" URIEncoding="UTF-8"
	port="8091" protocol="HTTP/1.1" redirectPort="8443"/>

//	
서버 더블클릭(Overview)

서버 로케이션
Use Tomcat installation 체크

서버 옵션
상단 2개 추가로 체크
Serve Module without publishing
publish module contexts to seperate XML files

세팅종료후 STS 검색후 설치

설치후 preference 에서 spring 설치확인

tern 다운로드 마켓플레이서 -> more -> 구버전용 다운직접해야됨
http://oss.opensagres.fr/tern.repository/1.2.0/


#####################################################################################

스프링 역사

EJB를 주 프레임워크로 사용 할 때 불편했던 점들을 해소

스프링 프레임워크

JAVA 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크
엔터프라이즈 개발이 용이하다는것은 개발자가 복잡하고 실수하기 쉬운 Low Level에 많이 신경 쓰지 않으면서
Business Login 개발에 전념할 수 있도록 해준다
Spring은 오픈소스의 장점을 충분히 취하면서 동시에 오픈소스 제품의 단점과 한계를 잘 극복함

[1]애플리케이션 프레임워크

특정 계층이나 기술, 업무 분야에 국한되지 않고 애플리케이션의 전 영역을 포괄하는 범용적인 프레임워크

[2]경량급 프레임워크

단순한 웹 컨테이너에서도 엔터프라이즈 개발의 고급기술을 대부분 사용 할 수 있음

###오픈소스란?
오픈소스란 원래 오픈소스 소프트웨어(Open Source Software, OSS)를 뜻하는 용어입니다. 
오픈소스 소프트웨어는 공개적으로 액세스할 수 있게 설계되어 누구나 자유롭게 확인, 수정, 배포할 수 있는 코드입니다.

###EJB란
Enterprise Java Bean
EJB란 분산 애플리케이션을 지원하는 컴포넌트 기반의 객체다. 
Servlet이 TOMCAT 같은 Servlet Container에 올려서 서비스 되는 것과 같이 EJB는 JBoss와 같은 EJB Container에 올려서 서비스된다
컴포넌트 기반의 객체의 의미는 재사용성에 있다. EJB 컴포넌트는 주로 비지니스 로직을 담고 있으므로 한번 제작되면 동일한 업무에 재사용될 수 있다.

###프레임워크란?
프레임 워크는 자주 쓰일 만한 기능들을 한데 모아 놓은 유틸(클래스)들의 모음(집합)
소프트웨어의 구체적인 부분에 해당하는 설계와 구현을 재사용이 가능하게끔 일련의 협업화된 형태로 클래스들을 제공하는 것으로서
라이브러리(Library)가 개발에 필요한 도구들을 단순히 나열해 놓은것이라면, 프레임워크는 동작에 필요한 구조를 어느정도 완성해 놓은
반제품 형태의 도구이다. 프레임워크를 사용하면 약간의 학습만으로 안정적인 시스템을 빠르게 개발 할 수 있다
이런 이유로 요즘 대부분 프로젝트들은 프레임워크를 기반으로 개발을 진행한다.

###프레임워크 vs 라이브러리

라이브러리란 자주 사용되는 로직을 재사용하기 편리하도록 잘 정리한 일련의 코드들의 집합
라이브러리는 자동차의 기능을 하는 부품
프레임워크는 자동차의 프레임, 즉 기본적으로 구성하고 있는 뼈대

자바 프레임워크		|||||	Struts, Spring, 전자정부 프레임워크 
프론트엔드 프레임워크 	|||||	Bootstrap, Foundation, MDL 

🚗 프레임워크
원하는 기능 구현에 집중하여 개발할 수 있도록 일정한 형태와 필요한 기능을 갖추고 있는 골격, 뼈대를 의미합니다.
프레임워크 예시
Java 서버 개발에 사용되는 Spring
Python 서버 개발에 사용되는 Django, Flask
안드로이드 앱 개발에 사용되는 Android
아이폰 앱 개발에 사용되는 Cocoa Touch
웹 개발에 사용되는 Angular, Vue.js 등
자바 기반의 JSP를 위한 프레임 워크 Struts
루비로 작성된 MVC패턴을 이용하는 Ruby on Rails

프레임워크는 애플리케이션의 코드가 프레임워크에 의해 사용됩니다.
애플리케이션 코드는 프레임워크가 짜 놓은 틀에서 수동적으로 동작 (제어의 역전 IoC)

IoC란 Inversion of Control의 줄임말이며, 제어의 역전
스프링 애플리케이션에서는 오브젝트(빈)의 생성과 의존 관계 설정, 사용, 제거 등의 작업을 애플리케이션 코드 대신 스프링 컨테이너가 담당한다.
이를 스프링 컨테이너가 코드 대신 오브젝트에 대한 제어권을 갖고 있다고 해서 IoC라고 부른다.
따라서, 스프링 컨테이너를 IoC 컨테이너라고도 부른다.
 
📚 라이브러리
소프트웨어를 개발할 때 컴퓨터 프로그램이 사용하는 비휘발성 자원의 모임. 즉 특정 기능을 모와둔 코드, 함수들의 집합이며 코드 작성 시 활용 가능한 도구들을 의미합니다.
라이브러리 예시
Python pip로 설치한 패키지/모듈 (tensorflow, pandas, beautifulsoup 등등)
C++의 표준 템플릿 라이브러리 (STL)
Node.js에서 npm으로 설치한 모듈
HTML의 클라이언트 사이드 조작을 단순화하는 JQuery
웹에서 사용자 인터페이스 개발에 사용되는 React.js

라이브러리를 사용할 때 사용자는 애플리케이션 코드의 흐름을 직접 제어


Spring FrameWork 특징
	
1.  #컨테이너 역할#
    Spring 컨테이너는 Java객체의 Life Cycle을 관리하며, Spring 컨테이너로부터 
    필요한 객체를 가져와 사용할 수 있다
2.  #DI (Dependency Injection) 지원#
    Spring은 설정 파일이나 어노테이션(@)을 통해서 객체간의 의존관계를
    설정할 수 있도록 하고 있다
3.  #AOP(Aspect Oriented Programming) 지원#
    Spring은 트랜잭션이나 로깅, 보안과 같이 공통적으로 필요로 하는 모듈들을
    실제 핵심 모듈에서 분리해서 적용할 수 있다
4.  #POJO(Plain Old Java Object) 지원#
    Spring 컨테이너에 저장되는 Java 객체는 특정한 인터페이스를 구현하거나,
    특정 클래스를 상속받지 않아도 된다.
5.  #트랜잭션 처리를 위한 일관된 방법을 지원#
	JDBC, JTA 등 어떤 트랜잭션을 사용하던 설정을 통해 정보를 관리하므로
	트랜잭션 구현에 상관없이 동일한 코드 사용 가능	
6.  #영속성(persistence)과 관련된 다양한 API를 지원#
	Spring은 MyBatis, Hibernate 등 데이터베이스 처리를 위한
	ORM(Object Relational Mapping)프레임워크등과의 연동을 지원

###AOP란
관점 지향 프로그래밍
어떤 로직을 기준으로 핵심적인 관점, 부가적인 관점으로 나누어서 보고 그 관점을 기준으로 각각 모듈화하겠다는 것이다


###DI란
의존성 주입


###persistence(영속성)-(=영구속성)
데이터의 지속성을 의미하는데 애플리케이션을 종료하고 다시 실행하더라도 
이전에 저장한 데이터를 다시 불러 올 수 있는 기술을 말한다


스프링과 메이븐 

*Spring의 시작
스프링을 사용하기 위해 Maven Build가 필요하다

###Maven
자바 개발의 사실상 표준 빌드 툴 
- 이전에는 ANT를 많이 사용했음

XML 설정 파일을 사용 
- groovy라는 언어로 설정을 하는 gradle이 등장

Convention over Configuration(CoC)
Java 기반 Web Aplication의 Best Practice를 따름 
- 개발 디렉토리 구조 
- 빌드 단계

*의존성 관리를 자동으로 수행
Maven 중앙 저장소(Central Repository)를 제공하여 자바 라이브러리에 대한 
생태계를 조성

*Porm.xml 메이븐의 메인 설정파일
- 프로젝트 루트에 위치
- 메이븐 프로젝트를 의미한다, IDE에서 불러오기 쉬움

*메이븐 프로젝트 설정 시 필수사항(*
[1]프로젝트명
-ArtifactId로 사용 

-버전이 없는 jar 파일의 이름으로 ArtifactId는 프로젝트의 이름으로 사용됨
-aritifact는 소프트웨어의 산출물을 의미한다. 자바의 경우 빌드를 완료하면 .jar 파일이 만들어지고 이를 아티팩트라고 부름.
-이러한 이유로 artifactId는 .jar 파일의 이름이 된다.
	aritifact = 프로젝트
	ArtifactId = 프로젝트이름


[2]그룹 아이디 (groupId)
-주로 프로젝트 생성 조직이나 기관의 도메인명 역순으로 표기 
ex)kr.co.company
- package 명으로 사용됨 

- 모든 프로젝트 중에서 당신의 프로젝트를 식별하게 해주는 식별자 (고유한 이름)
- groupId는 Java의 패키지 이름 규칙을 따라야 함 즉 제어하는 도메인 이름의 반대로 시작
ex ) org.apache.maven, org.apache.commons 

[3]버전
-개발버전을 의미하는 snapshot 버전 사용 
cf) 배포버전 : Release 버전 

Maven을 설치하여 사용 할 수 있음
로컬 또는 IDE에 포함