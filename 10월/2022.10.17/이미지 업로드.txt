파일/웹/네트워크 이 3가지는 반드시 예외처리를 작성해야한다

사진(이미지) 업로드

[1]DB생성

CREATE TABLE TB_FILE(
    IDX NUMBER,
    PARENT_SEQ NUMBER NOT NULL,
    ORIGINAL_FILE_NAME VARCHAR2(260 BYTE) NOT NULL,	
    STORED_FILE_NAME VARCHAR2(36 BYTE) NOT NULL,
    FILE_SIZE NUMBER,
    CRE_DATE DATE NOT NULL,
    PRIMARY KEY(IDX)
);
테이블의 칼럼설명

IDX : 파일 인덱스 (고유 번호 기본키)
PARENT_SEQ : 외래키로 받아와서 사용할 예정 (NOT NULL일 경우 반드시 파일 업로드를 해야됨 차후 수정(?))
ORIGINAL_FILE_NAME:  intro.txt (오리지날 파일명) -- 파일원상복구를 위한 칼럼
STORED_FILE_NAME: DB에 실제로 저장되는 파일명 (랜덤으로 고유한 값이 저장됨)
--> A회원: intro.txt 업로드(서버에 저장) // B회원: intro.txt 업로드(서버에 저장) (이미 A회원이 올린 intro.txt가 있음)
서버에 동일한 파일의 이름이 저장이 되면 덮어씌우기(overwrite) 된다
그러므로 실제 파일명과 STORED_FILE_NAME을 두어 DB에 저장되는 이름은 각각 다르게 저장되게 한다
(즉 사용자는 파일명을 같게 올려도 실제로 DB에는 유니크한 랜덤으로 설정된 이름으로 값이 저장된다)
FILE_SIZE: 파일 크기 
CRE_DATE: 파일 업로드한 날짜

즉 A회원이 abc파일 B회원이 abc파일을 올리면
각각 ORIGINAL_FILE_NAME은 abc로 같아도 
	STORED_FILE_NAME은 qwjeiqw3bsesa~, 121412fdsqe 등 고유한 유니크한값을 갖게된다


CREATE SEQUENCE TB_FILE_IDX_SEQ
    START WITH 1
INCREMENT BY 1;

[2]porm.xml에 dependency 추가

MavenRepository에서 commons-io 검색

https://mvnrepository.com/artifact/commons-io/commons-io/2.6
<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
<dependency>
	<groupId>commons-io</groupId>
	<artifactId>commons-io</artifactId>
	<version>2.6</version>
</dependency>

[3]servlet-context.xml에 bean 추가 

<bean id="multipartResolver" 
class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<property name="maxUploadSizePerFile" value="104857600"/> -- 최대 업로드사이즈 100(1024비트*1024바이트*100)메가
	<property name="defaultEncoding" value="UTF-8"/>
</bean>

[4]컨트롤러 (아직 미완)
//멤버추가 (실제로 멤버추가되는 로직) ~~Ctr -> 작업
//10.17 - 파일업로드(이미지) 기능 추가 MultipartHttpServletRequest mulRequest 파라미터로 추가
@RequestMapping(value="/member/addCtr.do", method = RequestMethod.POST)
public String memberAdd(MemberDto memberDto,
		MultipartHttpServletRequest mulRequest, Model model) {	
	logger.trace("Welcome MemberController memberAdd! 신규등록 처리!!! "
		+ memberDto);
	
	try {
		memberService.memberInsertOne(memberDto, mulRequest);
	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	
	return "redirect:/member/list.do";
}

[4-1] 서비스 (아직 미완)
public void memberInsertOne(MemberDto memberDto, MultipartHttpServletRequest mulRequest) throws Exception;

[4-2] 서비스 impl (아직 미완)
	private static final Logger log 
		= LoggerFactory.getLogger(MemberServiceImpl.class);	

	@Resource(name="fileUtils")
	private FileUtils fileUtils;

	@Override
	public void memberInsertOne(MemberDto memberDto,
			MultipartHttpServletRequest mulRequest) throws Exception {
		// TODO Auto-generated method stub
		
		memberDao.memberInsertOne(memberDto, mulRequest);
		
		int parentSeq = memberDto.getNo();
		
		List<Map<String, Object>> list
			= fileUtils.parseInsertFileInfo(parentSeq
				, mulRequest);
		
		for (int i = 0; i < list.size(); i++) {
			memberDao.insertFile(list.get(i));
		}
	}

[4-3] DAO (아직 미완)
	public void memberInsertOne(MemberDto memberDto, MultipartHttpServletRequest mulRequest);
	
	//파일업로드 기능 추가
	public void insertFile(Map<String, Object> map);
[4-4] DAO impl (아직 미완)

	@Override
	public void memberInsertOne(MemberDto memberDto, MultipartHttpServletRequest mulRequest) {
		// TODO Auto-generated method stub
		sqlSession.insert("com.edu.member.memberInsertOne", memberDto);
	}
	
	@Override
	public void insertFile(Map<String, Object> map) {
		// TODO Auto-generated method stub
		
		sqlSession.insert(namespace + "insertFile", map);
	}	
	
[4-5] Mapper에 insertFile 추가

	<insert id="insertFile" parameterType="memberDto">
		INSERT INTO TB_FILE
		(IDX, PARENT_SEQ, ORIGINAL_FILE_NAME,
		STORED_FILE_NAME, FILE_SIZE, CRE_DATE)
		VALUES
		(TB_FILE_IDX_SEQ.NEXTVAL, #{parentSeq}, #{original_file_name},
		 #{stored_file_name}, #{file_size}, SYSDATE)
	</insert>	
	
[5]com.edu.utils 패키지에 FileUtils 클래스 추가 (아직 미완)
package com.edu.util;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

@Component("fileUtils")	//스프링이 관리해준다 @Component 옛날기술임
public class FileUtils {
	
	// 절대경로로 C드라이브 upload폴더가 파일서버가 된것(사용자가 올린 파일이 올라올 서버 위치)
	private static final String filePath = "C:\\upload";
	
	public List<Map<String, Object>> parseInsertFileInfo(int parentSeq
			, MultipartHttpServletRequest multipartHttpServletRequest)
				throws Exception{
		
		//이터레이터로 되어있다(파일이 몇개 올렸는지 중요하지 않으므로)
		//Iterator: 요소를 순차적으로 스캔 -> getFileNames() 알아서 이름을 가져와서 iterator에 들어옴
		Iterator<String> iterator = multipartHttpServletRequest.getFileNames();
		MultipartFile multipartFile = null;
		
		// intro.txt를 업로드시 각각 오리지날 파일, 오리지날파일 확장자, DB에 들어갈 파일명(중복되지않는 고유값)
		// 3개로 분리시켜 나중에 복구작업때 사용
		
		String originalFileName = null;			// intro
		String originalFileExtension = null;	// txt
		String storedFileName = null;			// 중복되지 않도록 이름을 만듬 
		
		// Map<String, Object> 단건 업로드처리 -- 다수 업로드 처리를 생각해서 List<Map<String, Object>> 형식으로 만듬
		
		List<Map<String, Object>> fileList =
			new ArrayList<Map<String,Object>>();
			
		// Map<String, Object> fileInfoMap -- 실제 DB에 저장할 내용이 들어감
		Map<String, Object> fileInfoMap = null;
		
		//new File(filePath)을 하면 이제 File을 다룰수있는 file객체가 완성된다
		File file = new File(filePath);
		
		//이곳에 파일이 존재하냐를 따짐 -> 존재하지 않을경우?
		//C:\\upload에 파일이 존재하지 않았으므로 디렉토리가 생성된것		
		if(file.exists() == false) {
			//디렉토리를 생성한다(make directory)
			//즉 파일이 없으므로 C드라이브에 upload폴더 디렉토리가 생성된것이다 (한번 만들어진 이후로는 디렉토리가 생성되지 않음)
			file.mkdirs();
		}
		
		//반복자 수행 - 건수가 있으면 진행 (iterator.hasNext()) 이 행위를 업로드한 갯수만큼 진행하게 된다 (다중 업로드)
		while(iterator.hasNext()) {
			//getFile(iterator.next())을 통해 이름이 아니라 진짜 파일을 가져온다 
			//iterator.next()에 iterator에 파일이름의  key가 등록되어있어서 가져온다
			
			multipartFile
				= multipartHttpServletRequest.getFile(iterator.next());
			
			//해당 파일이 비어있는지를 확인하고 비어있지 않으면?
			if(multipartFile.isEmpty() == false) {
				//오리지날 파일명 
				originalFileName = multipartFile.getOriginalFilename();
				//오리지날 확장자명 (.) 다음에 있는 확장자 (substring, lastIndexOf) 문자열뽑기 
				originalFileExtension = originalFileName.substring(
					originalFileName.lastIndexOf("."));
				//UUID.randomUUID를 통해 랜덤값을 뽑고 거기에 오리지날 확장자명을 붙여서 DB에저장될 이름을 생성
				//CommonUtils에 메소드를 생성해서 호출함 (중복문제를 해결함)
				storedFileName = CommonUtils.getRandomString()
						+ originalFileExtension;
				
				//이제 파일에 경로와 DB에 저장될 파일명을 넣어준다
				file = new File(filePath, storedFileName);
				
				//이제 실제 파일을 전송한다(filePath경로로 storedFileName의 이름으로 저장된다)
				//C:upload에서 확인가능
				multipartFile.transferTo(file);
				
				//이제 Map타입으로 DB에 정보를 보낼 변수에 parentSeq, 오리지날파일명,확장자,고유파일명,사이즈를 담는다
				fileInfoMap = new HashMap<String, Object>();
				fileInfoMap.put("parentSeq", parentSeq);
				fileInfoMap.put("original_file_name", originalFileName);
				fileInfoMap.put("stored_file_name", storedFileName);
				fileInfoMap.put("file_size", multipartFile.getSize());
				
				//담은 Map타입 변수를 fileList에 추가한다 (업로드한 파일 수만큼 인덱스가 생기겠죠)
				fileList.add(fileInfoMap);
			}
		}
		
		return fileList;
	}
}

[6]com.edu.utils 패키지에 CommonUtils 클래스 추가 (아직 미완)
package com.edu.util;

import java.util.UUID;

public class CommonUtils {
	
	public static String getRandomString() {
		return UUID.randomUUID().toString().replaceAll("-", "");
	}

}

[7]MemberForm.jsp
	input 파일 타입 추가 file은 stream 타입임

	post로 전달시 enctype="multipart/form-data"를 해주면 파일을 보낼 수 있다 
	(파일 업로드시 반드시 post방식을 사용해야한다)
	
	<form action='./addCtr.do' method='post' id='submitForm'
		enctype="multipart/form-data">
		이름: <input type='text' name='name' id='name'><br>
		이메일: <input type='text' name='email' id='email'><br>
		암호: <input type='password' name='password' id='password'><br>
		파일: <input type="file" name='file'>
		<input type='submit' value='추가' id='submitBtn'>
		<input type='button' value='뒤로가기' onclick='pageMoveListFnc();'>
	</form>	