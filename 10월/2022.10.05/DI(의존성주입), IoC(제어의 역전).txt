DI(Dependency Injection)
의존성 주입 

IoC(Inversion of Control)
IoC의 개념
IoC(제어의 역전)이란, 객체의 생성, 생명주기의 관리까지 모든 객체에 대한 제어권이
바뀌었다는 것을 의미한다
##IoC or DI 컨테이너 - 의존관계 주입을 대신 객체를 생성하고 관리하면서 의존관계를 연결해주는 것입니다.##
##(최근에는 IoC가 아닌 DI컨테이너 용어를 자주 사용합니다. 또는 어샘블러, 오브젝트 팩토리 등으로 불려지기도 합니다.)##

*컴포넌트 의존관계 결정
설정(configuration) 및 생명주기(LifeCycle)를 해결하기 위한 디자인 패턴 

*스프링 프레임워크도 객체에 대한 생성 및 생명주기를 관리할 수 있는 기능을 제공하고 있다.
즉 IoC 컨테이너 기능을 제공한다 
- IoC 컨테이너는 객체의 생성을 책임지고, 의존성을 관리한다
- POJO의 생성, 초기화, 서비스, 소멸에 대한 권한을 가진다 
- 개발자들이 직접 POJO를 생성할 수 있지만 컨테이너에게 맡긴다 

Spring에서는 Spring Container가 한다

IoC -> DI 분류:
- Setter, Constructor, Method, Injection

DL(Dependency Lookup) 의존성 검색

DI(Dependency Injection) 의존성 주입
: 각 클래스 간의 의존관계를 빈 설정(Bean Definition) 정보를 바탕으로
컨테이너가 자동으로 연결해준다

*Managed Bean
- 스프링 컨테이너에 의해서 관리되는 객체
- 스프링 빈 이라고도 함 
- 스프링 설정파일에 등록되어 사용

*Spring Container*
- 관리되어지는 빈이 모여 있는곳 
- IoC 컨테이너로써 Application Context 클래스로 구현됨

#스프링은 스프링 컨테이너에 빈(자바객체)을 로딩하여 관리한다 
#빈을 자동으로 관리해주는 기능(IoC)은 스프링의 핵심 기능 중 하나이다