	스프링 login.do 
	
	[1]edu_mapper.xml 참조
	
	parameterType(map)이 선언되어 있어서 DaoImpl로 부터 매개변수를 전달받아 실행이 된다
	<select id="memberExist" parameterType="map"
		resultMap="memberResultMap">
		SELECT MNAME, EMAIL
		FROM MEMBER
		WHERE EMAIL = #{email} AND PWD = #{pwd}
	</select>	
	
	#{email} 과 #{pwd}
	
	mybatis문법 
	파라미터값을 찾는방식 #{key값}을 입력시 value값이 나온다
	
	[2]memberDaoImpl 참조
	
	@Override
	public MemberDto memberExist(String email, String password) {
		
		//이메일과 패스워드 값을 넘기기 위해서(?)
		HashMap<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("email", email);	key값 email value값 사용자가 입력한 email(파라미터값, 전달인자)
		paramMap.put("pwd", password);	key값 pwd   value값 사용자가 입력한 password(파라미터값, 전달인자)
 
		두번째 매개변수를 전달하는법이 ,임 즉 paramMap에 email과 pwd를 담아서 
		edu_mapper.xml에서 memberExist를 실행하는데 #{email}과 #{pwd}를 실행한다
		
		파라미터를 2개이상 전달하려면 HashMap형식으로 전달한다 ( HashMap<키값 타입, 밸류 타입>)
		return sqlSession.selectOne("com.edu.member.memberExist", paramMap);		
		
		//위의 코드를 설명하자면 아래코드와 같지만 아래방식으로는 안씀 memberDto를 선언하고 사용하는곳이 없으므로)
		MemberDto memberDto
			= sqlSession.selectOne("com.edu.member.memberExist", paramMap);
			
		return memberDto;
	}
	
	sqlSession은 Datasource.xml에 정의되어있음
	
	<bean id="sqlSessionFactory" 
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" 
			value="classpath:/config/mybatis-config.xml"/>
		<property name="mapperLocations" value="classpath:/mappers/*.xml"/>
	</bean>
	
	즉 mappers/<mapper namespace="com.edu.member">/memberExist가 실행되는것
	
	
	[3]MemberServiceImpl 참조
	Dao에 email과 password를 전달함
	
	@Override
	public MemberDto memberExist(String email, String password) {
		// TODO Auto-generated method stub
		return memberDao.memberExist(email, password);
	}
	
	[4]MemberController
	
	@RequestMapping(value="/auth/login.do", method = RequestMethod.GET)
	public String login(HttpSession session, Model model) {
	
		logger.info("Welcome MemberController login!");
		
		return "auth/LoginForm";
	}
	
	아무것도 안담긴 model을 view/auth/LoginForm으로 전달해준다
	
	##Model##
	기존에는 HttpServletRequest클래스를 사용하여 데이터를 영역에 저장했었지만 Spring에서는 데이터 저장을 위해서  Model객체를 따로 만들었다.
	Model.addAttribute(키, 값)을 적게 되면 request영역에 값이 저장된다.
	Model객체는 request영역만 가능하기 때문에 Session영역에 값 저장은 불가능 하다.
	
	Model.addAttribute( "key", value ) == request.setAttribute( "key", value)
	Model은 영역객체(request)를 대신하는 객체	
	만약, 키값을 생략시 클래스명을 키값으로 대신한다.
	또, jsp파일의 태그에 name을 적어 놓으면 컨트롤러에서 인자값에 동일한 이름을 넣으면 값을 가져올 수 있다.
	
	@RequestMapping(value="/auth/loginCtr.do", method = RequestMethod.POST)
	public String loginCtr(String email, String password
			, HttpSession session, Model model) {	
		logger.info("Welcome MemberController loginCtr! " + email + 
				", " + password);
		
		MemberDto memberDto = memberService.memberExist(email, password);
		
		if(memberDto != null) {
			session.setAttribute("member", memberDto);
						
			return "redirect:/member/list.do";
		}
		
		return "/auth/LoginFail";
	}	
	
	이전에 서블릿에서 임의의 페이지로 넘겨서 전달을 하던 방법에서 (sendRedirect)
	Spring 프레임워크에서는 컨트롤러에서 다시 컨트롤러로 전달을 함으로써 작업이 가능하다
	
	기존에 사용하던 sendRedirect 
	resp.sendRedirect("auth/userList.jsp"); 
			
	//Spring Framework 를 사용한다면 컨트롤러에서 리턴타입은 String으로 하고 view 이름 대신 
	//"redirect:" 로 시작하는 문자열을 반환 하면 해당 주소로 리다이렉트를 시켜 줍니다.
	//아래의 경우 다시 list.do 컨트롤러로 요청정보를 삭제하고 전달한다