2022/08/30 깃허브 수업
		오픈 소스(open source)란?
		자유롭게 누구나 열람하거나 수정이 가능하고,
		다른 사람들에게 배포를 할 수 있는 소프트웨어
		
		오픈소스에 대한 오해
		오픈소스를 만드는 사람은 무조건 소스를 무료로 공개하고 주기만 한다는 것
		오픈소스 사용자는 아무제한 없이 공짜로 쓰기만 하면 된다는 것
		
		오픈 소스의 참된 의미
		공유를 통해 본인의 프로젝트가 커지고 활성화 되는 것
		다양한 사람들의 피드백을 통해 더 좋은 소스코드로 발전하는 것
		
		커뮤니티에 의해 집단으로 만들어진 소프트웨어이며
		license에 대한 규칙에 얽매이지 않음
		동료들끼리 서로 소스코드를 검토하고 운영
		모든 의사결정과 문서화 등은 오픈소스에 참여하는 모든 사람들에 의해
		이루어짐
		
		소셜 기능
		!unwatch
		-해당 저장소를 지속적으로 관찰 하겠다는 기능
		-이 기능을 활성화 시키면 해당 저장소가 어떤 이슈를 처리하는지에 대해
		계속 알림을 받게 된다
		
		!star
		-해당 저장소에 관심을 나타내는 것이며 내가 추가했던 저장소 목록을
		확인 가능하다
		-star가 많은 저장소들은 월간, 주간, 일간으로 분류되어 인기 저장소로
		선정되며 explore 페이지에 개시된다
		
		!fork
		-해당 저장소를 내 계정에다가 그대로 복사하여 사용하는 기능
		-원본 저장소에 이슈가 있다면 내 저장소에 fork를 하고
		이슈를 수정하여 원본 저장소에 이슈를 전송 할 수 있다
		
		
		!git의 기본용어
		repository
		저장소라고 부른다
		소스코드의 모든 내용을 저장
		각 소스코드의 변경 사항을 관리하는 곳
		
		working tree
		원격저장소에 있는 모든 소스코드와 변경 정보를 복사한 내 컴퓨터의
		작업 디렉토리의 현재 상태
		
		Directory
		원격저장소에 저장된 소스코드와 그 변경사항을 관리하기 위해
		내 컴퓨터에 변경점에 대한 정보만을 따로 관리
		
		Branch
		소프트웨어 개발에서 다양한 버전이나 특정 기능들을 따로 구현해야 할 때에
		기본 개발부분을 건드리지 않고 분기를 생성
		
		Merge
		Branch를 생성해서 작업하던 내용을 Master Branch로 통합(병합)하여
		반영되게 할 때 기능 수행
		합치기 기능
		
		명령어 GUI bash
		git 협업 시스템, 형상 관리 시스템, 백업복구 소스코드 관리
		
		github git을 편리하게 활용 할 수 있는 커뮤니티, 혹은 공간 중 하나
		
		git의 관리 대상
		파일과 폴더등 전부 관리 대상으로 잡는다
		
		각 파일이나 폴더는 아래와 같은 상태들을 가지고 변화하며
		이에 따라 진행 할 수 있는 명령어들이 다르다
		
		파일의 상태
		untracked -> unmodified -> modified -> staged
		
					
				add a file -> edit a file -> stage a file
		remove a file <- commit a change
		
		(1)untracked -> 최초의 상태 (이클립스에서 share project 하여 완료시 프로젝트에 ?표시가 뜸) 올릴지 말지 -- 현재 반영 불가
		(2)unmodified -> 수정이 안된 상태 	-- 현재 반영 불가
		(3)modified -> 내용이 바뀜(수정) 		-- 현재 반영 불가
		------------------------------------------------
		(4)staged -> 어딘가에 커밋이 될 수 있는 상태(반영이 될 수 있음) 
		이클립스 기준 synchronize workspace를 통해서 show view로 git Staging을 추가해 Unstaged Changes에서 
		깃에 반영될 파일들을 add하여 Staged Changes로 옮긴뒤 반영을 한다
		

		과거 commit으로 되돌리는 기술들
		
		[1]reset 		
			reset은 특정 사건으로 되돌아가게 되는데 과거로 되돌아 갔으니 
			해당 사건 이후의 사건들은 모두 사라집니다
			
			–soft : index 보존(add한 상태, staged 상태), 워킹 디렉터리의 파일 보존. 즉 모두 보존.
			–mixed : index 취소(add하기 전 상태, unstaged 상태), 워킹 디렉터리의 파일 보존 (기본 옵션)
			–hard : index 취소(add하기 전 상태, unstaged 상태), 워킹 디렉터리의 파일 삭제. 즉 모두 취소.
			
			(1)soft:  커밋을 되돌린다
					  단, head만 되돌린다(인덱스를 유지함)
					  
			(2)mixed: 커밋을 되돌린다 
					  단지 인덱스와 head를 이전 커밋 수행 하기전으로 상태를 되돌린다(즉 지금시점은 index파일을 추가하기전상태 바로 커밋전)
			
			(3)hard:  모든 commit이 수행되기 전 상태로 되돌린다
					  인덱스, 헤드, 워킹트리 등 모든 관련 정보가 삭제된다					  
		
		revert
		
			커밋의 변경사항을 되돌린다
			앞선 커밋이 실패한 경우에도 역지사지로 기록을 하자 싶으면 revert를 사용한다
			evert는 앞서 말한 것 처럼 특정 사건을 골라서 없던일로 만듭니다. 
			또한 앞서 말한 것처럼 과거 특정 사건을 없에주지만 revert를 했다는 이력이 남게 됩니다. 

		해당 프로젝트 우클릭 -> Team -> show in History 
		여기에 지금까지 커밋한 작업 목록이 순서대로 나온다
		
		현재 예제기준
		여기서 먼저 돌아가려는 시점에 우클릭 reset -> mixed를 클릭해본다
		현재 깃허브에는 4가지 커밋이 존재하고 프로젝트에는 3가지 커밋이 존재해서
		프로젝트명 옆에 아래화살표 표시가뜬다 ↓1 
		
		여기서 Synchronize workspace로 가면 1개파일 (삭제하기전)가 <+>표시로 나온다
		즉 예제에서 현재 상태가 1,2,3,4커밋까지 되있는 상태에서 3번에서 reset mixed를 할경우
		3번 커밋이 되기 직전상태 즉 1,2번째 커밋까지 된상태 + 3번째 커밋직전 상태로 돌아간다
		
		
		-- 리포지토리 삭제시
		해당 저장소 선택 - setting - dangerzone 에서 delete repository로 삭제
		
git 세팅

다운로드 next next next ~~

git bash 실행(터미널)

1. 유저이름 세팅
git config --global user.name "HyunSeok Cho"		

2. 유저이메일 세팅
git config --global user.email "herais0001@gmail.com" (깃허브 가입계정 이메일)

git config --list 
리스트를 통해 이름과 이메일이 제대로 들어갔는지 확인

Github에 처음 코드 업로드하기 🏋️‍♂️
초기화

git init
추가할 파일 더하기

git add .
.(점) 은 모든 파일이라는 뜻, 선택적으로 올리고 싶으면 add뒤에 파일 이름 붙여주면 됨 (예. git add index.html)

상태 확인 (선택사항)

git status
히스토리 만들기

git commit -m "first commit" (히스토리 내역에 이름을 뭐로 줄지 " " 이 안에 작성하면됨 날짜를 적던지 뭐를 했는지를 적던지 알아서)
-m 은 메세지의 준말로 뒤에 “” 안에 주고싶은 히스토리 이름을 주면 됨 (즉, 구지 first commit일 필요가 없다는 뜻^^)

Github repository랑 내 로컬 프로젝트랑 연결

git remote add origin https://github.com/bitnaGithub/firstproject.git
이 명령어는 github에서 복사해서 붙여와야함 (유투브 강의 참조)

잘 연결됬는지 확인 (선택사항)

git remote -v
내가 연결한 주소값이 잘 뜨면 성공!🎇

Github로 올리기

git push origin master
master 자리에는 branch이름이 들어가면 됨 branch이름이 main라하면 git push origin main 이라고 써야함

Github에 계속 업데이트 하는법 🤹‍♂️
추가할 파일 더하기
git add .
히스토리 만들기
git commit -m "first commit"
Github로 올리기
git push origin master
내 컴퓨터에 소스코드를 업데이트를 하고 싶으면 이 세개의 스텝만 계속 반복하면 됨.

Github로 팀프로젝트 하는법 👨‍👩‍👧‍👦
Github에서 소스코드 다운로드

git clone 주소 폴더이름
주소는 깃허브에서 들고와야함
폴더이름은 선택사항이다 (즉 없어도됨) 폴더이름을 줄경우에는 그 폴더가 새로 생성이 되면서 그 안에 코드들이 다운로드가 되고, 폴더이름을 안줄경우엔 깃허브 프로젝트 이름으로 폴더가 자동으로 생기고 그안에 코드들이 다운로드된다.
Github에서 내 브렌치(branch)만들기

git checkout -b 브렌치이름
내 브렌치에 소스코드 업데이트하기

git add .
git commit -m "first commit"
git push origin 브렌치이름
마스터 브렌치에 소스 가져오기(pull)

git pull origin master
pull을 하기전에는 기존에 소스코드들을 commit을 먼저 해놔야 한다 (2탄 강의참조)

브렌치끼리 이동하는 법

git checkout 브렌치이름
강의에서 소개하진 않았지만 내가 내 브렌치에서 마스터 브렌치로 이동을 하고 싶거나 다른 브렌치로 이동하고싶으면 해당 명령어를 쓰면 된다

깃 명령어를 가장 잘 연습할수 있는 방법은 여러분이 친구끼리👨‍👩‍👧‍👧 한번 뭉쳐서 팀 프로젝트를 같이 해보는 겁니다! 한번 다같이 팀프로젝트를 해보면서 부딛히고 실수하고 깨져봐야 마음으로 느껴지실겁니다❤

여러분들의 무한한 발전을 위하여! 이 누나가 항상 응원하겠습니다🚀🚀