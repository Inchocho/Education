package one;

public class ExceptionEx1 {

	public static void main(String[] args) {

		int num = 100;
		int result = 0;

//		java.lang.ArithmeticException: / by zero : 산술연산 나눗셈에서 나누는값이 0이라는 숫자가 들어가면 에러임 by zero 오류

		for (int i = 0; i < 10; i++) {
			try {
				result = num / (int) (Math.random() * 10);

				System.out.println(result);
			} catch (ArithmeticException ae) {
				System.out.print(0);
				System.out.println("\t->0으로 나눌 수 없습니다");

			}

		}
	}

}

//예외처리(Exception handling)
//
//프로그램 오류
//프로그램이 실행 중 어떤 원인에 의해서 오작동을 하거나 비정상적으로 종료되는 
//경우가 있다. 이러한 결과를 초래하는 원인을 프로그램 에러 또는 오류라고 한다
//
//발생시점에 따라
//컴파일러 에러(compile-time error)
//런타임 에러(runtime error)
//
//컴파일 에러? --> 타이핑 시점에서 발생(코드에러)
//컴파일(코드작성) 할 때 발생하는 에러
//
//런타임 에러?
//프로그램의 실행도중에 발생하는 에러
//
//논리적(logical error) 에러? 
//컴파일도 잘되고 실행도 잘되지만 의도한 것과 결과가 다르게 동작하는 것을 말한다
//
//[1]컴파일 에러 - 컴파일 시에 발생하는 에러(코드작성, 타이핑시)
//[2]런타임 에러 - 실행 시에 발생하는 에러(실행시 에러)
//[3]논리적 에러 - 실행은 되지만, 의도와 다르게 동작하는 것(결과가 다르게나옴)
//
//컴파일러가 알려준 에러들을 모두 수정해서 컴파일을 성공적으로 마치고 나면
//클래스 파일(*.class)이 생성되고, 생성된 클래스 파일을 실행할 수 있게 된다
//
//
//컴파일을 에러없이 성공적으로 마쳤다고 해서 프로그램의 실행 시에도 에러가 발생하지 않는 것은 아니다
//
//실행 도중에 발생할 수 있는 잠재적인 오류까지 검사할 수 없기 때문이다
//
//런타임 에러를 방지하기 위해서는
//모든 경우의 수를 고려하여 이에 대한 대비를 하는 것이 필요하다
//
//자바에서 실행 시 발생할 수 있는 프로그램 오류를 에러(error)와 예외(exception) 두 가지로 구분한다
//
//에러는 메모리 부족이나 스택오버플로우 같이 일단 발생하면 복구할 수 없는 심각한 오류
//
//예외는 발생하더라도 수습될 수 있는 비교적 덜 심각한 것이다
//
//[1]에러가 발생하면 프로그램의 비정상적인 종료를 막을 길이 없지만 --> 일단 발생시 복구불가한 심각함 (방지불가)
//[2]예외는 발생하더라도 프로그래머가 이에 대한 적절한 코드를 미리 작성해 놓음으로써 --> 예외처리를 통해 비정상종료를 방지가능
//프로그램의 비정상적인 종료를 막을 수 있다

//예외처리하기
//try - catch문

//프로그램의 실행도중에 발생하는 에러는 어쩔 수 없지만 
//예외(exception)는 프로그래머가 이에 대한 처리를 미리 해주어야 한다

//예외처리
//정의: 프로그램 실행 시 발생할 수 있는 예외의 발생에 대비한 코드를 작성하는 것
//목적: 프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것
//
//	try {
//		// 예외가 발생할 가능성이 있는 문장들을 넣는다
//	}catch(Exception1 e1) {
//		// Exception1이 발생했을 경우, 이를 처리하기 위한 문장들을 적는다
//	}catch(Exception2 e2) {
//		// Exception2가 발생했을 경우, 이를 처리하기 위한 문장들을 적는다
//	},,,,
//	catch(ExceptionN eN) {
//		// ExceptionN가 발생했을 경우, 이를 처리하기 위한 문장들을 적는다
//	}
