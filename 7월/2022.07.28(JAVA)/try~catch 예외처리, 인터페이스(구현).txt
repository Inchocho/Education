try ~ catch (예외처리 exception)

try ~ catch ~ finally

에러(error)와 예외(exception)의 차이

error - 천재지변 개발자가 예상하고 막을 수 있는 범위에 문제가 아님

exception - 미리 예방하여 해결할 수 있는 문제 (예외처리)

Exception 클래스 ( 최상위 예외(Exception) 클래스 )

Exception(최상위) -> RuntimeException(부모) -> ~나머지 Exception(자손)

예외처리도 다형성을 이용함

----------------------------------------------------------------
인터페이스란(Interface)?

추상클래스처럼 추상메서드를 갖지만 추상클래스보다 추상화 정도가 높아서
추상클래스와 달리 몸통을 갖춘 일반 메서드 또는 멤버변수를 구성원으로 가질 수 없다

오직 추상메서드와 상수만을 멤버로 가질 수 있으며, 그 외의 다른 어떠한 요소도 허용하지 않는다

추상클래스를 부분적으로만 완성된 '미완성된 설계도' 라고 한다면
인터페이스는 구현된 것은 아무 것도 없고 밑그림만 그려져 있는 '기본 설계도'라 할 수 있다

인터페이스는 그 자체만으로 사용되기 보다는 다른 클래스를 작성하는데 도움 줄 목적으로 작성된다

인터페이스 작성
interface 인터페이스이름{
	public static final 타입 상수이름 = 값;
	public abstract 메서드이름(매개변수목록);
}

- 모든 멤버변수는 public static final 이어야 하며, 이를 생략 할 수 있다
- 모든 메서드는 public abstract 이어야 하며, 이를 생략 할 수 있다
- 클래스와 달리 다중상속이 가능하다

인스턴스는 그 자체로 생성 할 수 없다
구현을 위해서 implements(구현)를 사용해야 한다

class 클래스이름 implements 인터페이스이름{
	// 인터페이스 정의된 추상메서드를 구현한다
}

인터페이스는 상속(extends) 대신 구현(implements)이라는 용어를 사용한다

인터페이스의 장점
-개발시간을 단축시킬 수 있다
-표준화가 가능하다
-서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다
-독립적인 프로그래밍이 가능하다

인터페이스에서
(public static final ~)변수는 대문자로 작성한다
ctrl + shift + x (블록처리한곳 대문자) ctrl + shift + y (블록처리한곳 소문자화)

오버라이딩의 조건
메소드,매개변수,반환타입이 완벽하게 같아야한다.
접근제어자도 같거나 더 커야한다 (즉 인터페이스의 메소드를 구현할 경우 항상 public 접근제어자를 적어야 한다)
또한 부모클래스보다 많은 예외처리를 할 수 없다.
근데 어차피 우린 자동완성으로 만들거니까 그 메소드를 다시 오버로딩 할경우만 주의하자
@Override는 아무것도 아님 걍 명시 코멘트 남겨주는거임(주석대신 재정의한것을 가독성을 높임)